{"version":3,"sources":["store/reducer.js","store/index.js","utils/news.ts","store/actionCreators.js","service/login.ts","views/component/message/index.tsx","views/component/message/Msg.tsx","utils/request.ts","store/constants.js","FrontendAuth.js","routerMap.js","router/index.jsx","reportWebVitals.ts","index.tsx"],"names":["defaultState","userInfo","loginShow","userNewsType","fileList","reducer","state","action","type","SetUserInfo","RemoveUserInfo","LoginShow","LoginRemove","SetUserNewsType","newsType","SetFileList","store","createStore","require","util","getScrollTop","bodyScrollTop","documentScrollTop","document","body","scrollTop","documentElement","getScrollHeight","bodyScrollHeight","documentScrollHeight","scrollHeight","getWindowHeight","compatMode","clientHeight","getIsTOBottom","firstTokenUserinfo","a","getUser","result","status","dispatch","setUserInfo","getUrlParam","name","reg","RegExp","r","window","location","search","substring","match","decodeURI","copy","url","copyDom","createElement","setAttribute","appendChild","select","execCommand","removeChild","message","info","removeUserInfo","loginRemove","setUserNewsType","setFileList","dologin","data","post","captcha","get","sendSms","sendSmsreg","doreg","loginOut","doWechat","doBindPhone","wechatLink","sendResetsms","checkResetsms","resetpass","add","Msg","text","className","MessageContainer","useState","lists","setList","option","pre","obj","setTimeout","L","key","filter","each","remove","useEffect","length","shift","map","getId","Math","random","toFixed","$message","success","warning","error","el","getElementById","id","append","ReactDOM","createMessage","MODULE","params","Promise","resolve","reject","axios","headers","then","response","catch","err","defaults","timeout","baseURL","interceptors","request","use","config","res","errno","pathname","href","encodeURIComponent","errnoMsg","console","log","FrontendAuth","props","this","routerConfig","isLogin","getState","targetRouterConfig","find","item","path","auth","component","exact","to","Component","Loading","Login","loadable","LoadingComponent","Register","routerMap","IRouter","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render"],"mappings":"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","file":"static/js/main.790186d1.chunk.js","sourcesContent":["import { SetUserInfo, RemoveUserInfo, LoginShow, LoginRemove, SetUserNewsType, SetFileList } from \"./constants.js\";\r\n\r\nconst defaultState = {\r\n  userInfo: null,//用户信息\r\n  loginShow: false,//模态登录框是否显示\r\n  userNewsType: [],//内容管理的新闻资讯类型，因为传的id，每次都要请求类型列表，所以第一次请求就存起来不用每次都请求\r\n  fileList: [], //发布文章封面图片的file文档，存localstorage会转字符串，file文件会失效，所以存store，主要在预览后上传组件就重新调用了，file文件清零了\r\n};\r\n\r\nfunction reducer(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case SetUserInfo:\r\n      return {\r\n        ...state,\r\n        userInfo: action.userInfo,\r\n      };\r\n    case RemoveUserInfo:\r\n      return {\r\n        ...state,\r\n        userInfo: null,\r\n      };\r\n    case LoginShow:\r\n      return {\r\n        ...state,\r\n        loginShow: true,\r\n      };\r\n    case LoginRemove:\r\n      return {\r\n        ...state,\r\n        loginShow: false,\r\n      };\r\n    case SetUserNewsType:\r\n      return {\r\n        ...state,\r\n        userNewsType: action.newsType\r\n      };\r\n    case SetFileList:\r\n      return {\r\n        ...state,\r\n        fileList: action.fileList\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","// 2. 引入reducer\r\nimport reducer from \"./reducer.js\";\r\n// 3.创建一个store\r\nconst {createStore} = require(\"redux\");\r\nconst store = createStore(reducer)\r\n\r\nexport default store;\r\n","//@ts-nocheck\r\nimport { getUser } from \"service/login\";\r\nimport store from \"store\";\r\nimport { setUserInfo } from \"store/actionCreators\";\r\nimport message from 'views/component/message/index'\r\nexport const util = {\r\n    getScrollTop : () => {\r\n        var scrollTop = 0, bodyScrollTop = 0, documentScrollTop = 0;\r\n        if(document.body){\r\n          bodyScrollTop = document.body.scrollTop;\r\n        }\r\n        if(document.documentElement){\r\n          documentScrollTop = document.documentElement.scrollTop;\r\n        }\r\n        scrollTop = (bodyScrollTop - documentScrollTop > 0) ? bodyScrollTop : documentScrollTop;\r\n        return scrollTop;\r\n      },\r\n    getScrollHeight : () => {\r\n        var scrollHeight = 0, bodyScrollHeight = 0, documentScrollHeight = 0;\r\n        if(document.body){\r\n            bodyScrollHeight = document.body.scrollHeight;\r\n        }\r\n        if(document.documentElement){\r\n            documentScrollHeight = document.documentElement.scrollHeight;\r\n        }\r\n        scrollHeight = (bodyScrollHeight - documentScrollHeight > 0) ? bodyScrollHeight : documentScrollHeight;\r\n        return scrollHeight;\r\n    },\r\n    getWindowHeight : () => {\r\n        var windowHeight = 0;\r\n        if(document.compatMode == \"CSS1Compat\"){\r\n            windowHeight = document.documentElement.clientHeight;\r\n        }else{\r\n            windowHeight = document.body.clientHeight;\r\n        }\r\n        return windowHeight;\r\n    },\r\n    getIsTOBottom:()=>{\r\n        return util.getScrollHeight() - util.getScrollTop() - util.getWindowHeight()\r\n    },\r\n    firstTokenUserinfo:async()=>{\r\n        const result = await getUser()\r\n        result.status && store.dispatch(setUserInfo(result.body))\r\n    },\r\n    getUrlParam:(name)=>{\r\n        var reg = new RegExp(\"(^|&)\"+ name +\"=([^&]*)(&|$)\");\r\n        var r = window.location.search.substring(1).match(reg);\r\n        if(r!=null)return  decodeURI(r[2]); return null;\r\n    },\r\n    //点击复制内容\r\n    copy:(url) => {\r\n        let copyDom = document.createElement(\"input\");\r\n        copyDom.setAttribute(\"value\",url);// 获得需要复制的内容\r\n        // copyDom.style.display = \"none\";//不要让他displaynone,否则复制不出来\r\n        document.body.appendChild(copyDom); // 添加到 DOM 元素中\r\n        copyDom.select(); // 执行选中,注意: 只有 input 和 textarea 可以执行 select() 方法.\r\n        // let content = window.getSelection().toString();// 获得选中的内容\r\n        document.execCommand(\"copy\");// 执行复制命令\r\n        document.body.removeChild(copyDom);// 将 input 元素移除\r\n        message.info('复制成功');\r\n    }\r\n}","// 引入需要使用的 常量\r\nimport { SetUserInfo, RemoveUserInfo,LoginShow,LoginRemove,SetUserNewsType, SetFileList } from \"./constants.js\";\r\n// 存储用户信息\r\nexport const setUserInfo = (userInfo) => {\r\n  return {\r\n    type: SetUserInfo,\r\n    userInfo,\r\n  };\r\n};\r\n// 删除用户信息\r\nexport const removeUserInfo = () => ({\r\n  type: RemoveUserInfo\r\n});\r\n\r\n//设定悬浮框登录显示\r\nexport const loginShow = () => ({\r\n  type: LoginShow\r\n})\r\n\r\n//设定悬浮框登录消失\r\nexport const loginRemove = () => ({\r\n  type: LoginRemove\r\n})\r\n\r\n//存储个人中心新闻类型\r\nexport const setUserNewsType = (newsType) => {\r\n  return {\r\n    type: SetUserNewsType,\r\n    newsType,\r\n  };\r\n};\r\n\r\n//存储个人中心新闻类型\r\nexport const setFileList = (fileList) => {\r\n  return {\r\n    type: SetFileList,\r\n    fileList,\r\n  };\r\n};","import {get, post} from '../utils/request'\n\nexport const dologin =(data):Promise<API.IResult>=>{\n    return  post('login/login.do','user',data)\n}\n\nexport const captcha  =():Promise<API.IResult>=>{\n    return  get('public/captcha.get','user')\n}\n\nexport const sendSms =(data):Promise<API.IResult>=>{\n    return  post('login/sms/send.do','user',data)\n}\n\nexport const sendSmsreg =(data):Promise<API.IResult>=>{\n    return  post('login/regsms/send.do','user',data)\n}\n\nexport const getUser =():Promise<API.IResult>=>{\n    return  get('public/uinfo.get','user')\n}\n\nexport const doreg =(data):Promise<API.IResult>=>{\n    return  post('login/register.do','user',data)\n}\n\n\nexport const loginOut =():Promise<API.IResult>=>{\n    return  get('login/out.do','user')\n}\n\n//微信扫码获取code后传后端\nexport const doWechat =(data):Promise<API.IResult>=>{\n    return  post('login/wechat/callback.do','user',data)\n}\n\n//绑定手机号\nexport const doBindPhone =(data):Promise<API.IResult>=>{\n    return  post('login/wechat/bind.do','user',data)\n}\n\n//获取微信登录二维码链接\nexport const wechatLink =(data):Promise<API.IResult>=>{\n    return  get('login/wechat/qrinfo.get','user',data)\n}\n\n//重置密码发送短信\nexport const sendResetsms =(data):Promise<API.IResult>=>{\n    return  post('login/resetsms/send.do','user',data)\n}\n\n//重置密码短信验证\nexport const checkResetsms =(data):Promise<API.IResult>=>{\n    return  post('login/resetsms/check.do','user',data)\n}\n\n//重置密码\nexport const resetpass =(data):Promise<API.IResult>=>{\n    return  post('login/resetpass/modify.do','user',data)\n}","// index.tsx\r\nimport { useState,useEffect } from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport Msg from './Msg';\r\nimport { MessageApi,List } from './config';\r\nimport './index.scss';\r\n\r\nlet add: (L: List) => void;\r\nexport const MessageContainer = () => {\r\n  const [lists ,setList] = useState<List[]>([]);\r\n  const remove = (L:List) => {\r\n    const { key } = L;\r\n    setList((pre:List[]) => ( pre.filter((each:List) => key !== each.key) ))\r\n  }\r\n\r\n  add = (option:List) => {\r\n    setList((pre:List[])=>{\r\n      const obj = [...pre,option ];\r\n      setTimeout(() => {\r\n          remove(option)\r\n        }, 1500)\r\n        return obj\r\n    })\r\n    // 最好不用下面这个写法，当同时调用两个message时候，只会显示最后调用那次\r\n    // const obj = [...lists,option ];\r\n    // setList(obj);\r\n    // setTimeout(() => {\r\n    //   remove(option)\r\n    // }, timeout)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (lists.length > 0) {\r\n      lists.shift();\r\n    }\r\n  }, [lists])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        lists.map(({ text, key, type }) => (\r\n            <Msg key={key} type={type} text={text} />\r\n        ))\r\n      }\r\n    </>\r\n  )\r\n} \r\n\r\n// 获取唯一id\r\nconst getId = () => {\r\n  return (Math.random() * 1000).toFixed()\r\n}\r\n\r\n// 暴露的message-API\r\nconst $message: MessageApi = {\r\n  info: (text) => {\r\n    add({\r\n      text,\r\n      key: getId(),\r\n      type: 'info'\r\n    })\r\n  },\r\n  success: (text) => {\r\n    add({\r\n      text,\r\n      key: getId(),\r\n      type: 'success'\r\n    })\r\n  },\r\n  warning: (text) => {\r\n    add({\r\n      text,\r\n      key: getId(),\r\n      type: 'warning'\r\n    })\r\n  },\r\n  error: (text) => {\r\n    add({\r\n      text,\r\n      key: getId(),\r\n      type: 'error'\r\n    })\r\n  }\r\n}\r\nexport default $message;\r\n\r\n// 挂载容器到页面\r\nconst createMessage = () => {\r\n  let el = document.getElementById('#message-wrap');\r\n  // 这一步是必要的的，因为在执行到这里的时候，页面还没有挂载，所以获取不到el节点\r\n  if (!el) {\r\n      el = document.createElement('div')\r\n      el.className = 'message-wrap'\r\n      el.id = 'message-wrap'\r\n      document.body.append(el)\r\n  }\r\n  ReactDOM.render( <MessageContainer />, el);\r\n}\r\ncreateMessage();\r\n\r\n","// Msg.tsx\r\nconst Msg = ({type, text }:{ type:string,text: string }) => {\r\n    return (\r\n          <div className={`message ${type}`}>\r\n              {/* <span className='icon' /> */}\r\n              <span>{text}</span>\r\n          </div>\r\n    );\r\n  };\r\n  \r\n  export default Msg;\r\n  \r\n  ","/**\r\n * 网络请求配置\r\n */\r\nimport axios from \"axios\";\r\nimport message from '../views/component/message/index'\r\nimport { AxisPointerComponent } from \"echarts/components\";\r\n\r\naxios.defaults.timeout = 10000;\r\naxios.defaults.baseURL = \"/api\";\r\n\r\n\r\n\r\n/**\r\n * http request 拦截器\r\n */\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n\r\n    //  config.data = JSON.stringify(config.data);\r\n    config.headers = {\r\n      ...config.headers,\r\n      \"Content-Type\": \"application/json\"\r\n    };\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * http response 拦截器\r\n */\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    errnoMsg(response)\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.log(\"请求出错：\", error);\r\n    message.info(error)\r\n  }\r\n);\r\n\r\n/**\r\n * 封装get方法\r\n * @param url  请求url\r\n * @param params  请求参数\r\n * @returns {Promise}\r\n */\r\nexport function get(url, MODULE, params = {}) {\r\n  return new Promise<API.IResult>((resolve, reject) => {\r\n    axios.get(url, {\r\n      params: params,\r\n      headers: { MODULE }\r\n    }).then((response) => {\r\n      resolve(response.data);\r\n    })\r\n      .catch((error) => {\r\n        message.info(error)\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * 封装post请求\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\r\n\r\nexport function post(url, MODULE, data) {\r\n  return new Promise<API.IResult>((resolve, reject) => {\r\n    axios.post(url, data, { headers: { MODULE } }).then(\r\n      (response) => {\r\n        //关闭进度条\r\n        resolve(response.data);\r\n      },\r\n      (err) => {\r\n        message.info(err.data.message)\r\n        reject(err);\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * 封装patch请求\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\r\nexport function patch(url, data = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    axios.patch(url, data).then(\r\n      (response) => {\r\n        resolve(response.data);\r\n      },\r\n      (err) => {\r\n        msag(err);\r\n        reject(err);\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * 封装put请求\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\r\n\r\nexport function put(url, data = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    axios.put(url, data).then(\r\n      (response) => {\r\n        resolve(response.data);\r\n      },\r\n      (err) => {\r\n        msag(err);\r\n        reject(err);\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n//统一接口处理，返回数据\r\nexport default function (fecth, url, param, mode) {\r\n  let _data = \"\";\r\n  return new Promise((resolve, reject) => {\r\n    switch (fecth) {\r\n      case \"get\":\r\n        console.log(\"begin a get request,and url:\", url);\r\n        get(url, param)\r\n          .then(function (response) {\r\n            resolve(response);\r\n          })\r\n          .catch(function (error) {\r\n            console.log(\"get request GET failed.\", error);\r\n            reject(error);\r\n          });\r\n        break;\r\n      case \"post\":\r\n        post(url, param, mode)\r\n          .then(function (response) {\r\n            resolve(response);\r\n          })\r\n          .catch(function (error) {\r\n            console.log(\"get request POST failed.\", error);\r\n            reject(error);\r\n          });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n}\r\n//统一接口status为0，errno的不同值做处理\r\nfunction errnoMsg(res) {\r\n  if (!res.data.status) {\r\n    switch (res.data.errno) {\r\n      case 10500: message.info('服务器未知错误'); break;\r\n      case 10400: message.info('错误的请求'); break;\r\n      case 10403: message.info('非法token'); break;\r\n      case 10600: message.info(res.data.message); break;\r\n      //  case 10610: message.info('参数校验失败');break;\r\n      case 10611: message.info(res.data.message); break;\r\n      case 10620:\r\n        message.info('身份认证失败');\r\n        window.location.pathname === '/app/user' && (window.location.href = '/app/login?url=' + encodeURIComponent(window.location.pathname + window.location.search))\r\n        break;\r\n      case 10621: message.info('未授权'); break;\r\n      case 10622: message.info('用户未找到'); break;\r\n      case 10623: message.info('用户已禁用'); break;\r\n      case 10624: message.info('密码错误'); break;\r\n      case 10625: message.info('用户绑定失败');\r\n    }\r\n  }\r\n}\r\n//失败提示\r\nfunction msag(err) {\r\n  if (err && err.response) {\r\n    switch (err.response.status) {\r\n      case 400:\r\n        alert(err.response.data.error.details);\r\n        break;\r\n      case 401:\r\n        alert(\"未授权，请登录\");\r\n        break;\r\n\r\n      case 403:\r\n        alert(\"拒绝访问\");\r\n        break;\r\n\r\n      case 404:\r\n        alert(\"请求地址出错\");\r\n        break;\r\n\r\n      case 408:\r\n        alert(\"请求超时\");\r\n        break;\r\n\r\n      case 500:\r\n        alert(\"服务器内部错误\");\r\n        break;\r\n\r\n      case 501:\r\n        alert(\"服务未实现\");\r\n        break;\r\n\r\n      case 502:\r\n        alert(\"网关错误\");\r\n        break;\r\n\r\n      case 503:\r\n        alert(\"服务不可用\");\r\n        break;\r\n\r\n      case 504:\r\n        alert(\"网关超时\");\r\n        break;\r\n\r\n      case 505:\r\n        alert(\"HTTP版本不受支持\");\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 查看返回的数据\r\n * @param url\r\n * @param params\r\n * @param data\r\n */\r\nfunction landing(url, params, data) {\r\n  console.log(url)\r\n  if (data.code === -1) {\r\n  }\r\n}\r\n\r\n","export const SetUserInfo = \"SetUserInfo\";\r\nexport const RemoveUserInfo = \"RemoveUserInfo\";\r\nexport const LoginShow = \"LoginShow\"\r\nexport const LoginRemove = \"LoginRemove\"\r\nexport const SetUserNewsType = \"SetUserNewsType\"\r\nexport const SetFileList = \"SetFileList\"","/**\r\n * 路由守卫校验\r\n */\r\n import { Divider } from \"antd\";\r\nimport React, {Component} from \"react\";\r\n import {Route, Redirect} from \"react-router-dom\";\r\n import store from \"store\";\r\n \r\n class FrontendAuth extends Component {\r\n     // eslint-disable-next-line no-useless-constructor\r\n     constructor(props) {\r\n         super(props);\r\n     }\r\n \r\n     render() {\r\n         const {routerConfig, location} = this.props;\r\n         const {pathname} = location;\r\n         const isLogin = store.getState().userInfo;\r\n        //  console.log(pathname, isLogin);\r\n        //  console.log(location);\r\n\r\n         // 如果该路由不用进行权限校验，登录状态下登陆页除外\r\n         // 因为登陆后，无法跳转到登陆页\r\n         // 这部分代码，是为了在非登陆状态下，访问不需要权限校验的路由\r\n         const targetRouterConfig = routerConfig.find(\r\n             (item) => item.path === pathname\r\n         );\r\n        //  console.log(targetRouterConfig);\r\n         if (targetRouterConfig && !targetRouterConfig.auth && !isLogin) {\r\n             const {component} = targetRouterConfig;\r\n             return <Route exact path={pathname} component={component}/>;\r\n         }\r\n         if (isLogin) {\r\n             // 如果是登陆状态，想要跳转到登陆，重定向到主页,但是这里的主页是另一个项目的HTML，像这样重定向页面不会跳转，所以暂时重定向到个人中心\r\n             if (pathname === \"/app/login\") {\r\n                 return <Redirect to=\"/app/user\"/>;\r\n             } else {\r\n                 // 如果路由合法，就跳转到相应的路由\r\n                 if (targetRouterConfig) {\r\n                     return (\r\n                         <Route path={pathname} component={targetRouterConfig.component}/>\r\n                     );\r\n                 } else {\r\n                     // 如果路由不合法，重定向到 404 页面\r\n                    return <Redirect to={pathname}/>;\r\n                 }\r\n             }\r\n         } else {\r\n             // 非登陆状态下，当路由合法时且需要权限校验时，跳转到登陆页面，要求登陆\r\n             if(targetRouterConfig){                \r\n                if(targetRouterConfig.auth){\r\n                    return <Redirect to=\"/app/login\"/>;\r\n                }else{\r\n                    <Route path={pathname} component={targetRouterConfig.component}/>\r\n                }\r\n             }else {\r\n                // 如果路由不合法，重定向到 404 页面\r\n                return <Redirect to={pathname}/>;\r\n            }\r\n             \r\n         }\r\n     }\r\n }\r\n \r\n export default FrontendAuth;\r\n \r\n ","import loadable from 'loadable-components'     //npm i loadable-components 用作解决路由懒加载\r\nconst Loading = () => <div>Loading...</div>\r\n \r\nconst Home = loadable(() => import('views/home'), {\r\n    LoadingComponent: Loading,\r\n})\r\nconst Login = loadable(() => import('views/login/login'), {\r\n    LoadingComponent: Loading,\r\n})\r\n\r\nconst Register = loadable(() => import('views/login/register'), {\r\n    LoadingComponent: Loading,\r\n})\r\n\r\nconst User = loadable(() => import('views/user/user'), {\r\n    LoadingComponent: Loading,\r\n})\r\n//新闻列表页\r\nconst News = loadable(()=> import('views/news/news'), {\r\n    LoadingComponent: Loading,\r\n})\r\n//新闻详情页\r\nconst NewsDetail = loadable(()=> import('views/news/newsDetail'), {\r\n    LoadingComponent: Loading,\r\n})\r\n//文章作者的更多页面\r\nconst NewsAuthorMore = loadable(()=> import('views/news/authorMore'), {\r\n    LoadingComponent: Loading,\r\n})\r\n//第三方登录页面，空白页面，承载逻辑，分流跳转到相应页面，目前只有微信登录\r\nconst otherLogin = loadable(()=> import('views/login/component/othorLogin/otherLoginIndex'), {\r\n    LoadingComponent: Loading,\r\n})\r\n//手机绑定页面,验证成功后会登陆\r\nconst phoneBindLogin = loadable(()=> import('views/login/component/othorLogin/phoneBindLogin/phoneBindLogin'), {\r\n    LoadingComponent: Loading,\r\n})\r\n//用户须知页面\r\nconst userAgreement = loadable(()=> import('views/login/userAgreement'), {\r\n    LoadingComponent: Loading,\r\n})\r\n//个人中心-我的推广文章详情h5页面\r\nconst ArticleDetailh5= loadable(()=> import('views/user/articleDetailh5'), {\r\n    LoadingComponent: Loading,\r\n})\r\n//个人中心-我的推广海报详情h5页面\r\nconst PosterShareh5= loadable(()=> import('views/user/posterShareh5'), {\r\n    LoadingComponent: Loading,\r\n})\r\n\r\n\r\n\r\n\r\n\r\nexport const routerMap = [\r\n    {path: \"/app/user\", name: \"User\", component: User, auth: true},\r\n    {path: \"/app/login\", name: \"Login\", component: Login},\r\n    {path: \"/app/register/register\", name: \"Register\", component: Register},\r\n    {path: \"/app/register/forget\", name: \"Register\", component: Register},\r\n    {path: \"/app/news\", name: \"News\", component: News},\r\n    {path: \"/app/newsdetail\", name: \"NewsDetail\", component: NewsDetail},\r\n    {path: \"/app/newsauthormore\", name: \"NewsAuthorMore\", component: NewsAuthorMore},\r\n    {path: \"/app/wechat/callback.do\", name: \"otherLogin\", component: otherLogin},\r\n    {path: \"/app/bindphone\", name: \"phoneBindLogin\", component: phoneBindLogin},\r\n    {path: \"/app/useragreement\", name: \"userAgreement\", component: userAgreement},\r\n    {path: \"/app/user/articledetail\", name: \"ArticleDetailh5\", component: ArticleDetailh5},\r\n    {path: \"/app/user/posterdetail\", name: \"PosterShareh5\", component: PosterShareh5},\r\n];","import React,{Fragment} from 'react'\r\nimport loadable from 'loadable-components'     //npm i loadable-components 用作解决路由懒加载\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport FrontendAuth from \"FrontendAuth\";\r\nimport {routerMap} from \"routerMap\";\r\n// import NotFound from '../views/notFound'\r\n \r\n// const Loading = () => <div>Loading...</div>\r\n \r\n// const Home = loadable(() => import('../views/home'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n// const Login = loadable(() => import('../views/login/login'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n\r\n// const Register = loadable(() => import('../views/login/register'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n\r\n// const User = loadable(() => import('../views/user/user'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n// //新闻列表页\r\n// const News = loadable(()=> import('../views/news/news'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n// //新闻详情页\r\n// const NewsDetail = loadable(()=> import('../views/news/newsDetail'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n// //文章作者的更多页面\r\n// const NewsAuthorMore = loadable(()=> import('../views/news/authorMore'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n// const Develop = loadable(() => import('../views/develop.tsx'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n// const Oss = loadable(() => import('../views/ossImg.tsx'), {\r\n//     LoadingComponent: Loading,\r\n// })\r\n \r\n \r\nclass IRouter extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Fragment>\r\n                    {/*只匹配一个，匹配成功就不往下匹配，效率高*/}\r\n                    <Switch>\r\n                        <FrontendAuth routerConfig={routerMap}/>\r\n                    </Switch>\r\n                </Fragment>\r\n       \r\n                </Router>\r\n        )\r\n    }\r\n}\r\nexport default IRouter","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'index.scss';\r\nimport Router from 'router/index'\r\nimport reportWebVitals from 'reportWebVitals';\r\nimport {util} from 'utils/news'\r\nimport 'lib-flexible'\r\n\r\nutil.firstTokenUserinfo().then(()=>{\r\n  ReactDOM.render(\r\n      <Router />,\r\n    document.getElementById('root')\r\n  );\r\n})\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n// util.firstToken()\r\n"],"sourceRoot":""}